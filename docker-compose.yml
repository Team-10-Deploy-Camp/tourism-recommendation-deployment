version: "3.8"

services:
  db:
    image: postgres:13
    container_name: mlflow_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    container_name: mlflow_minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - mlflow_minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mlflow_server:
    build: ./mlflow_server
    container_name: mlflow_server
    command: >
      mlflow server
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port ${MLFLOW_PORT}
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
    depends_on:
      - db
      - minio

  fastapi_app:
    build: ./app
    container_name: fastapi_app
    ports:
      - "${FASTAPI_PORT}:8000"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow_server:${MLFLOW_PORT}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
    depends_on:
      - mlflow_server
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 50M
    #     reservations:
    #       cpus: '1'
    #       memory: 20M

  model_trainer:
    container_name: model_trainer
    build:
      context: ./model
      dockerfile: Dockerfile
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow_server:${MLFLOW_PORT}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:${MINIO_PORT}
    depends_on:
      - db
      - minio

  prometheus_server:
    image: prom/prometheus:v2.45.0
    container_name: prometheus_server
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - fastapi_app

  grafana_server:
    image: grafana/grafana:9.5.3
    container_name: grafana_server
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      - prometheus_server

  # ---- HORIZONTAL SCALLING ----
  # fastapi_app:
  #   build: ./app
  #   environment:
  #     - MLFLOW_TRACKING_URI=http://mlflow_server:5001
  #     - AWS_ACCESS_KEY_ID=minioadmin
  #     - AWS_SECRET_ACCESS_KEY=minioadmin
  #     - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
  #   depends_on:
  #     - mlflow_server
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # nginx_load_balancer:
  #   image: nginx:alpine
  #   container_name: nginx_load_balancer
  #   ports:
  #     - "8000:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     fastapi_app:
  #       condition: service_healthy

volumes:
  mlflow_db_data:
  mlflow_minio_data:
  prometheus_data:
  grafana_data:
